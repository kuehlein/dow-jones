{"version":3,"sources":["components/Navbar/Search.jsx","components/Navbar/index.jsx","components/SearchResults/Card.jsx","components/SearchResults/utils.jsx","components/SearchResults/CardContainer.jsx","components/SearchResults/index.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Search","_ref","getText","react_default","a","createElement","id","type","placeholder","onChange","e","target","value","Navbar","Navbar_Search","Card","pic","text1","text2","link","className","href","src","alt","formatJSON","isImage","data","fields","length","map","datum","SearchResults_Card","key","uuid","CardContainer","text","lowerText","toLowerCase","filteredData","filter","match","filterData","SearchResults","graphics","images","SearchResults_CardContainer","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","axios","default","get","then","res","catch","err","console","log","setState","recent","_this$state","components_Navbar","components_SearchResults","Component","Boolean","window","location","hostname","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1f9f7b2.chunk.js","sourcesContent":["import React from \"react\";\n\n/**\n * Search bar component. User is able to filter results in\n * `SearchResults` using the input here. `App` watches state of\n * input and passes it down to `SearchResults`.\n *\n * @param {*} props - contains `getText: (value: str) => void`\n * @returns {*} ReactElement<any>\n */\nconst Search = ({ getText }) => (\n  <div id=\"search\">\n    <p>search</p>\n    <input\n      type=\"text\"\n      placeholder=\"find an article...\"\n      onChange={e => getText(e.target.value)} // ! do this onClick with a search button\n    />\n  </div>\n);\n\nexport default Search;\n","import React from \"react\";\n\nimport Search from \"./Search\";\n\n/**\n * Navbar. Rendered at the top of the main `App` component. Houses `Search` component.\n *\n * @param {*} props - contains `getText: (val: str) => void`\n * @returns {*} ReactElement<any>\n */\nconst Navbar = ({ getText }) => (\n  <div id=\"nav\">\n    <h2>Search Images and Graphics</h2>\n    <Search getText={getText} />\n  </div>\n);\n\nexport default Navbar;\n","import React from \"react\";\n\n/**\n * Card for displaying either image or graphic. This component\n * will be mapped over by `CardContainer`.\n *\n * @returns {*} ReactElement<any>\n */\nconst Card = ({ pic, text1, text2, link }) => (\n  <div className=\"card\">\n    <a href={link}>\n      <img src={pic} alt=\"img\" />\n      <h3>{text1}</h3>\n      <p>{text2}</p>\n    </a>\n  </div>\n);\n\nexport default Card;\n","import React from \"react\";\n\nimport Card from \"./Card\";\n\n/**\n * *NOTE*\n * I probably wouldn't have tried to make this set of components dynamically render\n * cards based on content given because it makes for more confusing code, but\n * I thought I might as well go for it for fun ¯\\_(ツ)_/¯\n *\n * This would however be something that I would probably do if the image and graphic\n * data had the same or similar shape.\n */\n\n/**\n * Given input object `data `, filter out objects that do not contain search input `text`.\n * This filtering is case insensitive. If there are no results that match input,\n * return a message.\n *\n * @param {{}[]} data\n * @param {boolean} isImage\n * @param {str} text\n *\n * @returns {*} ReactElement<any>\n */\nexport const filterData = (data, isImage, text) => {\n  const fields = isImage\n    ? [\"href\", \"credit\", \"caption\", \"\"]\n    : [\"promo_image\", \"headline\", \"description\", \"destination\"];\n\n  const lowerText = text.toLowerCase();\n  const filteredData =\n    data &&\n    data\n      // filter out results that do not match our search\n      // (by default everything matches)\n      .filter(\n        datum =>\n          // we convert both strings to lower case so that our\n          // searches are case insensitive\n          datum[fields[1]].toLowerCase().match(lowerText) ||\n          datum[fields[2]].toLowerCase().match(lowerText)\n      );\n\n  return formatJSON(isImage, filteredData, fields);\n};\n\n/**\n * Given the result of filtering array `data`, return an array of cards for each\n * piece of data remaining. If there are no matches, return a message instead.\n *\n * @param {*} isImage\n * @param {*} data\n * @param {*} fields\n *\n * @returns {*} ReactElement<any>\n */\nconst formatJSON = (isImage, data, fields) =>\n  data.length ? (\n    data.map(datum => (\n      <Card\n        pic={datum[fields[0]]}\n        text1={datum[fields[1]]}\n        text2={datum[fields[2]]}\n        link={datum[fields[3]]}\n        key={datum.id || datum.uuid} // images have id, graphics have uuid\n      />\n    ))\n  ) : (\n    // if there are no matching search results, display message\n    <p>No {isImage ? \"images\" : \"graphics\"} to display</p>\n  );\n","import React from \"react\";\n\nimport { filterData } from \"./utils\";\n\n/**\n * Container for cards. Based on props received, this component will either contain\n * image or graphics cards.\n *\n * @returns {*} ReactElement<any>\n */\nconst CardContainer = ({ data, isImage, text }) => (\n  <div>\n    <div className=\"card-container\">{filterData(data, isImage, text)}</div>\n  </div>\n);\n\nexport default CardContainer;\n","import React from \"react\";\n\nimport CardContainer from \"./CardContainer\";\n\n/**\n * SearchResults page. This is the main body of the app. Wraps the\n * containers for image and graphics cards.\n *\n * @returns {*} ReactElement<any>\n */\nconst SearchResults = ({ graphics, images, text }) => (\n  <div className=\"search-results-container\">\n    <h2>Images</h2>\n    <CardContainer data={images} isImage text={text} />\n\n    <h2>Graphics</h2>\n    <CardContainer data={graphics} isImage={false} text={text} />\n  </div>\n);\n\nexport default SearchResults;\n","import \"./App.css\";\n\nimport axios from \"axios\";\nimport React, { Component } from \"react\";\n\nimport Navbar from \"./Navbar\";\nimport SearchResults from \"./SearchResults\";\n\n/**\n * Top level component of app. Rendered by `ReactDOM.render()` in `src/index.js`.\n * Contains all state for the application.\n *\n * @param {*}\n * @returns {*} ReactElement<any>\n */\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graphics: [],\n      images: [],\n      text: \"\"\n    };\n    this.getText = this.getText.bind(this);\n  }\n\n  async componentWillMount() {\n    // images\n    const images = await axios.default\n      .get(\n        \"https://hanilim.github.io/newsroomtools-test2019-assets/api/im.json\"\n      )\n      .then(res => res.data)\n      .catch(err => console.log(err));\n\n    // graphics\n    const graphics = await axios.default\n      .get(\n        \"https://hanilim.github.io/newsroomtools-test2019-assets/api/graphics.json\"\n      )\n      .then(res => res.data)\n      .catch(err => console.log(err));\n\n    this.setState({\n      graphics: graphics.recent,\n      images: images.images\n    });\n  }\n\n  getText(value) {\n    this.setState({ text: value });\n  }\n\n  render() {\n    const { images, graphics, text } = this.state;\n\n    return (\n      <div className=\"app-container\">\n        <Navbar getText={this.getText} />\n        <hr />\n        <SearchResults graphics={graphics} images={images} text={text} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}